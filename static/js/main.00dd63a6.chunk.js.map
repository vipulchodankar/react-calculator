{"version":3,"sources":["components/Display.js","components/Button.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","id","input","Button","name","onClick","handleClick","children","ClearButton","handleClear","className","App","isOperator","value","state","append","bind","handleEqual","this","setState","val","latest","toString","split","length","includes","slice","evaluate","err","console","error","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.00dd63a6.chunk.js","sourcesContent":["import React from 'react'\nimport './Display.scss'\n\nconst Display = props => (\n    <div id=\"display-container\">\n        <div id=\"display\"> {props.input == \"\"?0:props.input} </div>\n    </div>\n);\n\nexport default Display;","import React from 'react'\nimport './Button.scss'\n\nconst Button = props => (\n    <button id={props.name} onClick={() => props.handleClick(props.children)}>\n        { props.children }\n    </button>\n)\n\nexport default Button;","import React from 'react'\nimport './Button.scss'\n\nconst ClearButton = props => (\n    <button id={props.name} onClick={props.handleClear}  className=\"clear-button\">\n        { props.children }\n    </button>\n);\n\nexport default ClearButton;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Display from './components/Display'\nimport Button from './components/Button'\nimport ClearButton from './components/ClearButton'\n\nimport {evaluate} from 'mathjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    }\n\n    this.append = this.append.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleEqual = this.handleEqual.bind(this);\n  }\n\n  // Clears input\n  handleClear() {\n    this.setState({\n      input: \"\"\n    });\n  }\n\n  // Checks if item is an operator\n  isOperator = value => {\n    return value === \"+\" || value === \"-\" || value === \"*\" || value === \"/\"\n  }\n\n  // Appends value to input\n  append(val) {\n    let latest = this.state.input.toString().split(/[+/\\-*]+/);\n\n    // To prevent numbers from beginning from multiple 0s\n    if(this.state.input == 0 && val == 0) {\n      this.setState({ input: \"0\" });\n    } \n\n    // To prevent numbers to contain multiple decimals\n    else if (latest[latest.length-1].includes(\".\") && val == \".\") {\n      this.setState({ input: this.state.input });\n    }\n\n    // To deal with latest operators\n    else if(this.isOperator(this.state.input[this.state.input.length - 2]) && this.isOperator(this.state.input[this.state.input.length - 1]) && this.isOperator(val)) {\n      this.setState({ input: this.state.input.slice(0, this.state.input.length - 2)  + val })\n    }\n\n    // Finally append\n    else {\n      this.setState({ input: this.state.input + val });\n    }\n  };\n\n  // Function to evaluate input expression\n  handleEqual() {\n    try { \n      // Incase number begins with 0, then display it with 0\n      if(this.state.input[0] == \"0\")\n        this.setState({ input: \"0\" + evaluate(this.state.input) }) \n      else \n        this.setState({ input: evaluate(this.state.input) }) \n    }\n    catch(err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display input={this.state.input}/>\n        <div className=\"buttons-container\"> \n          <ClearButton name=\"clear\" handleClear={this.handleClear}>Clear</ClearButton>\n          <Button name=\"seven\" handleClick={this.append}>7</Button>\n          <Button name=\"eight\" handleClick={this.append}>8</Button>\n          <Button name=\"nine\" handleClick={this.append}>9</Button>\n          <Button name=\"divide\" handleClick={this.append}>/</Button>\n          <Button name=\"four\" handleClick={this.append}>4</Button>\n          <Button name=\"five\" handleClick={this.append}>5</Button>\n          <Button name=\"six\" handleClick={this.append}>6</Button>\n          <Button name=\"multiply\" handleClick={this.append}>*</Button>\n          <Button name=\"one\" handleClick={this.append}>1</Button>\n          <Button name=\"two\" handleClick={this.append}>2</Button>\n          <Button name=\"three\" handleClick={this.append}>3</Button>\n          <Button name=\"add\" handleClick={this.append}>+</Button>\n          <Button name=\"decimal\" handleClick={this.append}>.</Button>\n          <Button name=\"zero\" handleClick={this.append}>0</Button>\n          <Button name=\"equals\" handleClick={() => this.handleEqual()}>=</Button>\n          <Button name=\"subtract\" handleClick={this.append}>-</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}